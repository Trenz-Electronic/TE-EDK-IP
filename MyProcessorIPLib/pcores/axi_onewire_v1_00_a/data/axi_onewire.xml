<?xml version="1.0" encoding="UTF-8"?>
<!--
// DISCLAIMER OF LIABILITY
//
// This file contains proprietary and confidential information of
// Xilinx, Inc. ("Xilinx"), that is distributed under a license
// from Xilinx, and may be used, copied and/or disclosed only
// pursuant to the terms of a valid license agreement with Xilinx.
//
// XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
// ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
// EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
// LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
// does not warrant that functions included in the Materials will
// meet the requirements of Licensee, or that the operation of the
// Materials will be uninterrupted or error-free, or that defects
// in the Materials will be corrected. Furthermore, Xilinx does
// not warrant or make any representations regarding use, or the
// results of the use, of the Materials in terms of correctness,
// accuracy, reliability or otherwise.
//
// Xilinx products are not designed or intended to be fail-safe,
// or for use in any application requiring fail-safe performance,
// such as life-support or safety devices or systems, Class III
// medical devices, nuclear facilities, applications related to
// the deployment of airbags, or any other applications that could
// lead to death, personal injury or severe property or
// environmental damage (individually and collectively, "critical
// applications"). Customer assumes the sole risk and liability
// of any use of Xilinx products in critical applications,
// subject only to applicable laws and regulations governing
// limitations on product liability.
//
// Copyright (c) 2010 Xilinx, Inc.  All rights reserved.
-->
<spirit:component xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.4 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.4/index.xsd">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>bsb_lib.rtl_components</spirit:library>
  <spirit:name>axi_onewire</spirit:name>
  <spirit:version>1.00.a</spirit:version>
  <!-- busInterfaces -->
  <spirit:busInterfaces>
    <!-- onewire -->
    <spirit:busInterface>
      <spirit:name>onewire_0</spirit:name>
      <spirit:busType 
        spirit:vendor="xilinx.com" 
        spirit:library="bsb_lib.rtl_busdefs" 
        spirit:name="onewire" 
        spirit:version="1.0"/>
      <spirit:master/>

      <!-- bus to mpd port map
          DQ_Wire       : DQ_Wire -->

      <spirit:portMaps>
      	<spirit:portMap>
      		<spirit:logicalPort>
      			<spirit:name>DQ_Wire</spirit:name>
      		</spirit:logicalPort>
      		<spirit:physicalPort>
      			<spirit:name>DQ_Wire_Master</spirit:name>
      		</spirit:physicalPort>
      	</spirit:portMap>
      </spirit:portMaps>


    </spirit:busInterface>  

    <!-- axi -->
    <spirit:busInterface>
      <spirit:name>S_AXI</spirit:name>
      <spirit:busType 
        spirit:vendor="amba.com" 
        spirit:library="AMBA4" 
        spirit:name="AXILite" 
        spirit:version="r0p0_0"/>
   	  <spirit:slave/>

      <spirit:parameters>
        <spirit:parameter> 
          <spirit:name>C_S_AXI_PROTOCOL</spirit:name>
          <spirit:value spirit:id="C_S_AXI_PROTOCOL_ID" 
            spirit:resolve="user"
            spirit:format="string">NOT_SET</spirit:value>
        </spirit:parameter>
        <spirit:parameter> 
          <spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
          <spirit:value spirit:id="C_S_AXI_ADDR_WIDTH_ID" 
            spirit:resolve="user"
            spirit:format="string">NOT_SET</spirit:value>
        </spirit:parameter>
        <spirit:parameter> 
          <spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
          <spirit:value spirit:id="C_S_AXI_DATA_WIDTH_ID" 
            spirit:resolve="user"
            spirit:format="string">NOT_SET</spirit:value>
        </spirit:parameter>
      </spirit:parameters>

    </spirit:busInterface>  

	<!-- clk -->
    <spirit:busInterface>
      <spirit:name>S_AXI_ACLK</spirit:name>
      <spirit:busType 
        spirit:vendor="xilinx.com" 
        spirit:library="bsb_lib.rtl_busdefs" 
        spirit:name="clock" 
        spirit:version="1.0"/>
      <spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>S_AXI_ACLK</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>	  
    </spirit:busInterface>  

	<!-- rst : no rst in mhs
    <spirit:busInterface>
      <spirit:name>aresetn</spirit:name>
      <spirit:busType 
        spirit:vendor="xilinx.com" 
        spirit:library="bsb_lib.rtl_busdefs" 
        spirit:name="reset" 
        spirit:version="1.0"/>
      <spirit:slave/>
    </spirit:busInterface> -->

	<!-- interrupt -->
    <spirit:busInterface>
      <spirit:name>IP2INTC_Irpt</spirit:name>
      <spirit:busType 
        spirit:vendor="xilinx.com" 
        spirit:library="bsb_lib.rtl_busdefs" 
        spirit:name="interrupt" 
        spirit:version="1.0"/>
      <spirit:slave/>
    </spirit:busInterface> 

  </spirit:busInterfaces>
  <!-- model -->
  <spirit:model>

    <!-- ports: IO only -->
	<spirit:ports>

	  <!-- clk -->
	  <spirit:port>
	  	<spirit:name>S_AXI_ACLK</spirit:name>
	  	<spirit:wire>
	  		<spirit:direction>in</spirit:direction>
	  	</spirit:wire>
	  </spirit:port>

	  <!-- DQ_Wire -->
  	  <spirit:port>
  	  	<spirit:name>DQ_Wire_Master</spirit:name>
  	  	<spirit:wire>
  	  		<spirit:direction>inout</spirit:direction>
  	  	</spirit:wire>
  	  </spirit:port>


	</spirit:ports>

	<!-- modelParameters: 
	     param from mpd, default is not set, always let elab algo to assign -->
    <spirit:modelParameters>
      <spirit:modelParameter> 
        <spirit:name>C_FAMILY</spirit:name>
        <spirit:value spirit:id="C_FAMILY_ID" 
          spirit:resolve="generated"
          spirit:format="string">NOT_SET</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter> 
        <spirit:name>C_DEVICE</spirit:name>
        <spirit:value spirit:id="C_DEVICE_ID" 
          spirit:resolve="generated"
          spirit:format="string">NOT_SET</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter> 
        <spirit:name>C_PACKAGE</spirit:name>
        <spirit:value spirit:id="C_PACKAGE_ID" 
          spirit:resolve="generated"
          spirit:format="string">NOT_SET</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter> 
        <spirit:name>C_SPEEDGRADE</spirit:name>
        <spirit:value spirit:id="C_SPEEDGRADE_ID" 
          spirit:resolve="generated"
          spirit:format="string">NOT_SET</spirit:value>
      </spirit:modelParameter>

	  <!-- param from mpd, default is not set, always let elab algo to assign -->
      <spirit:modelParameter>
             <spirit:name>C_BASEADDR</spirit:name>
             <spirit:value spirit:id="C_BASEADDR_ID" spirit:resolve="generated">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter>
             <spirit:name>C_HIGHADDR</spirit:name>
             <spirit:value spirit:id="C_HIGHADDR_ID" spirit:resolve="generated">0</spirit:value>
      </spirit:modelParameter>	  
    </spirit:modelParameters>
  </spirit:model>
  <!-- parameters -->
  <spirit:parameters>
    <spirit:parameter> 
      <spirit:name>template_type</spirit:name>
      <spirit:value spirit:id="template_type_ID" 
        spirit:resolve="generated"
        spirit:format="string">axi_onewire</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
         <spirit:name>CORE_TEMPLATE_ASSOC</spirit:name>
         <spirit:value>onewire_template</spirit:value>
    </spirit:parameter>		
  </spirit:parameters>
</spirit:component>
